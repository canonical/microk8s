name: Test Kubeflow

on:
  push:
    paths-ignore:
      - "docs/**"
  pull_request:
    paths-ignore:
      - "docs/**"

jobs:
  test-aws:
    name: AWS
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        bundle: [full, lite]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download built snap
        uses: actions/download-artifact@v2
        with:
          name: microk8s.snap

      - name: Install dependencies
        run: |
          set -eux
          sudo snap install juju --classic
          sudo snap install juju-wait --classic

      - name: Bootstrap onto AWS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          set -eux
          juju autoload-credentials --client aws
          juju bootstrap aws/us-east-1 uk8saws --config test-mode=true --model-default test-mode=true
          juju deploy ubuntu --constraints 'cores=4 mem=16G root-disk=60G'
          juju wait -vw

      - name: Copy snap to AWS instance
        run: juju scp ./microk8s*.snap ubuntu/0:~/microk8s.snap

      - name: Install snap
        run: |
          juju ssh ubuntu/0 <<EOF
            set -eux
            sudo snap install ./microk8s*.snap --classic --dangerous
            sudo usermod --append --groups microk8s ubuntu
            sudo snap install juju-helpers --classic
          EOF

      - name: Enable kubeflow
        timeout-minutes: 45
        run: |
          juju ssh ubuntu/0 <<EOF
            set -eux
            export KUBEFLOW_BUNDLE=${{ matrix.bundle }}
            export KUBEFLOW_DEBUG=true
            export KUBEFLOW_IGNORE_MIN_MEM=true
            export KUBEFLOW_AUTH_PASSWORD=hunter2
            microk8s enable kubeflow
          EOF

      - name: Test kubeflow
        run: |
          juju ssh ubuntu/0 <<EOF
            set -eux
            export JUJU_DATA=/var/snap/microk8s/current/juju/share/juju
            sudo apt update
            sudo apt install -y libssl-dev python3-pip firefox-geckodriver
            git clone https://github.com/juju-solutions/bundle-kubeflow.git
            cd bundle-kubeflow
            git reset --hard 5e0b6fcb
            sudo pip3 install -r requirements.txt -r test-requirements.txt
            sudo microk8s status --wait-ready
            sudo microk8s kubectl -n kube-system rollout status ds/calico-node
            trap 'sudo pkill -f svc/pipelines-api' SIGINT SIGTERM EXIT
            microk8s kubectl -n kubeflow port-forward svc/pipelines-api 8888:8888 &
            (i=30; while ! curl localhost:8888 ; do ((--i)) || exit; sleep 1; done)
            pytest -vvs -m ${{ matrix.bundle }} -k 'not kubectl'
            pytest -vvs -m ${{ matrix.bundle }} -k 'kubectl'
          EOF

      - name: Get MicroK8s pods
        run: juju ssh ubuntu/0 sudo microk8s kubectl get pods -A --sort-by=.metadata.name
        if: failure()

      - name: Describe MicroK8s pods
        run: juju ssh ubuntu/0 sudo microk8s kubectl describe pods -nkubeflow
        if: failure()

      - name: Generate inspect tarball
        run: |
          juju ssh ubuntu/0 <<EOF
            sudo microk8s inspect | \
              grep -Po "Report tarball is at \K.+" | \
              sudo xargs -I {} mv {} inspection-report-${{ strategy.job-index }}.tar.gz
          EOF
          juju scp ubuntu/0:~/inspection-report-${{ strategy.job-index }}.tar.gz .
        if: failure()

      - name: Upload inspect tarball
        uses: actions/upload-artifact@v2
        with:
          name: inspection-report-aws
          path: ./inspection-report-${{ strategy.job-index }}.tar.gz
        if: failure()
