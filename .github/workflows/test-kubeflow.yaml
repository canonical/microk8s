name: Test Kubeflow

on:
  push:
    paths-ignore:
      - "docs/**"
  pull_request:
    paths-ignore:
      - "docs/**"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checking out repo
        uses: actions/checkout@v2

      - name: Install lxd
        run: |
          set -eux
          sudo snap install lxd
          sudo lxd.migrate -yes
          sudo lxd waitready
          sudo lxd init --auto
          sudo usermod --append --groups lxd $USER

      - name: Install snapcraft
        run: sudo snap install snapcraft --classic

      - name: Build snap
        run: sg lxd -c 'snapcraft --use-lxd'

      - name: Uploading snap
        uses: actions/upload-artifact@v2
        with:
          name: microk8s.snap
          path: ./microk8s*.snap

  test-actions:
    name: Actions
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download built snap
        uses: actions/download-artifact@v2
        with:
          name: microk8s.snap

      - name: Install snap
        run: |
          set -eux
          sudo snap install ./microk8s*.snap --classic --dangerous
          sudo usermod --append --groups microk8s $USER
          sudo microk8s status --wait-ready
          sudo microk8s kubectl -n kube-system rollout status ds/calico-node
          sudo snap install juju-helpers --classic

      - name: Enable kubeflow
        timeout-minutes: 45
        run: sg microk8s -c 'microk8s enable kubeflow --debug --bundle=edge --ignore-min-mem --password=hunter2'

      - name: Test kubeflow
        run: |
          set -eux
          export JUJU_DATA=/var/snap/microk8s/current/juju/share/juju
          sudo apt update
          sudo apt install -y libssl-dev python3-setuptools firefox-geckodriver
          git clone https://github.com/juju-solutions/bundle-kubeflow.git
          cd bundle-kubeflow
          sudo pip3 install -r requirements.txt -r test-requirements.txt
          sudo microk8s status --wait-ready
          sudo microk8s kubectl -n kube-system rollout status ds/calico-node
          trap 'sudo pkill -f svc/pipelines-api' SIGINT SIGTERM EXIT
          sudo microk8s kubectl -n kubeflow port-forward svc/pipelines-api 8888:8888 &
          (i=30; while ! curl localhost:8888 ; do ((--i)) || exit; sleep 1; done)
          sudo -E pytest -vvs -m edge -k 'not kubectl'
          sudo -E pytest -vvs -m edge -k 'kubectl'

      - name: Get MicroK8s pods
        run: sudo microk8s kubectl get pods -A
        if: failure()

      - name: Describe MicroK8s pods
        run: sudo microk8s kubectl describe pods -nkubeflow
        if: failure()

      - name: Get pipeline logs
        run: |
          set -eux
          pods=$(sudo microk8s kubectl get -nkubeflow pods -l workflows.argoproj.io/completed="true" -o custom-columns=:metadata.name --no-headers)
          for pod in $pods; do
            containers=$(sudo microk8s kubectl get -nkubeflow pods -o jsonpath="{.spec.containers[*].name}" $pod)
            for container in $containers; do
              sudo microk8s kubectl logs -nkubeflow --timestamps $pod -c $container
              printf '\n'
            done
            printf '\n\n'
          done
        if: failure()

      - name: Generate inspect tarball
        run: >
          sudo microk8s inspect |
          grep -Po "Report tarball is at \K.+" |
          sudo xargs -I {} mv {} inspection-report-${{ strategy.job-index }}.tar.gz
        if: failure()

      - name: Upload inspect tarball
        uses: actions/upload-artifact@v2
        with:
          name: inspection-report-actions
          path: ./inspection-report-${{ strategy.job-index }}.tar.gz
        if: failure()

  test-aws:
    name: AWS
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event.pull_request.head.repo.full_name == github.repository
    strategy:
      fail-fast: false
      matrix:
        bundle: [full, lite]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download built snap
        uses: actions/download-artifact@v2
        with:
          name: microk8s.snap

      - name: Install dependencies
        run: |
          set -eux
          sudo snap install juju --classic
          sudo snap install juju-wait --classic

      - name: Bootstrap onto AWS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          set -eux
          juju autoload-credentials --client aws
          juju bootstrap aws/us-east-1 uk8saws --config test-mode=true --model-default test-mode=true
          juju deploy ubuntu --constraints 'cores=4 mem=16G root-disk=60G'
          juju wait -vw

      - name: Copy snap to AWS instance
        run: juju scp ./microk8s*.snap ubuntu/0:~/microk8s.snap

      - name: Install snap
        run: |
          juju ssh ubuntu/0 <<EOF
            set -eux
            sudo snap install ./microk8s*.snap --classic --dangerous
            sudo usermod --append --groups microk8s ubuntu
            sudo snap install juju-helpers --classic
          EOF

      - name: Enable kubeflow
        timeout-minutes: 45
        run: |
          juju ssh ubuntu/0 <<EOF
            set -eux
            export KUBEFLOW_BUNDLE=${{ matrix.bundle }}
            export KUBEFLOW_DEBUG=true
            export KUBEFLOW_IGNORE_MIN_MEM=true
            export KUBEFLOW_AUTH_PASSWORD=hunter2
            microk8s enable kubeflow
          EOF

      - name: Test kubeflow
        run: |
          juju ssh ubuntu/0 <<EOF
            set -eux
            export JUJU_DATA=/var/snap/microk8s/current/juju/share/juju
            sudo apt update
            sudo apt install -y libssl-dev python3-setuptools firefox-geckodriver
            git clone https://github.com/juju-solutions/bundle-kubeflow.git
            cd bundle-kubeflow
            sudo pip3 install -r requirements.txt -r test-requirements.txt
            sudo microk8s status --wait-ready
            sudo microk8s kubectl -n kube-system rollout status ds/calico-node
            trap 'sudo pkill -f svc/pipelines-api' SIGINT SIGTERM EXIT
            microk8s kubectl -n kubeflow port-forward svc/pipelines-api 8888:8888 &
            (i=30; while ! curl localhost:8888 ; do ((--i)) || exit; sleep 1; done)
            pytest -vvs -m ${{ matrix.bundle }} -k 'not kubectl'
            pytest -vvs -m ${{ matrix.bundle }} -k 'kubectl'
          EOF

      - name: Get MicroK8s pods
        run: juju ssh ubuntu/0 sudo microk8s kubectl get pods -A --sort-by=.metadata.name
        if: failure()

      - name: Describe MicroK8s pods
        run: juju ssh ubuntu/0 sudo microk8s kubectl describe pods -nkubeflow
        if: failure()

      - name: dex-auth logs
        run: juju ssh ubuntu/0 sudo microk8s kubectl logs -nkubeflow --tail 1000 -l juju-app=dex-auth
        if: failure()

      - name: katib-ui logs
        run: juju ssh ubuntu/0 sudo microk8s kubectl logs -nkubeflow --tail 1000 -l juju-app=katib-ui
        if: failure()

      - name: oidc-gatekeeper logs
        run: juju ssh ubuntu/0 sudo microk8s kubectl logs -nkubeflow --tail 1000 -l juju-app=oidc-gatekeeper
        if: failure()

      - name: Get pipeline logs
        run: |
          juju ssh ubuntu/0 <<EOF
            set -eux
            pods=\$(microk8s kubectl get -nkubeflow pods -l workflows.argoproj.io/completed="true" -o custom-columns=:metadata.name --no-headers)
            for pod in \$pods; do
              containers=\$(microk8s kubectl get -nkubeflow pods -o jsonpath="{.spec.containers[*].name}" \$pod)
              for container in \$containers; do
                microk8s kubectl logs -nkubeflow --timestamps \$pod -c \$container
                printf '\n'
              done
              printf '\n\n'
            done
          EOF
        if: failure()

      - name: Generate inspect tarball
        run: |
          juju ssh ubuntu/0 <<EOF
            sudo microk8s inspect | \
              grep -Po "Report tarball is at \K.+" | \
              sudo xargs -I {} mv {} inspection-report-${{ strategy.job-index }}.tar.gz
          EOF
          juju scp ubuntu/0:~/inspection-report-${{ strategy.job-index }}.tar.gz .
        if: failure()

      - name: Upload inspect tarball
        uses: actions/upload-artifact@v2
        with:
          name: inspection-report-aws
          path: ./inspection-report-${{ strategy.job-index }}.tar.gz
        if: failure()
