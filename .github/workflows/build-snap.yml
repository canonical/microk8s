name: Build MicroK8s snap on PR and push to master

on:
  - push
  - pull_request

### While we work on the strict feature we want the tests to run even if we do put PRs against the master.
### When this work get merged into master the following should be commented in.
#  push:
#    branches:
#      - master
#  pull_request:
#    branches:
#      - master

jobs:
  build:
    name: Create snap package
    runs-on: ubuntu-20.04

    steps:
      - name: Checking out repo
        uses: actions/checkout@v3.0.2
      - name: Install lxd
        run: |
          sudo lxd init --auto
          sudo usermod --append --groups lxd $USER
          sg lxd -c 'lxc version'
      - name: Install snapcraft
        run: |
          sudo snap install snapcraft --classic
      - name: Install snapd from candidate
        run: |
          sudo snap refresh snapd --channel=latest/beta
      - name: Build snap
        run: |
          sg lxd -c 'snapcraft --use-lxd'
          sudo mv microk8s*.snap microk8s.snap
      - name: Uploading snap
        uses: actions/upload-artifact@v3
        with:
          name: microk8s.snap
          path: microk8s.snap
      - name: Install test dependencies
        run: |
          set -x
          sudo apt-get install python3-setuptools 
          sudo pip3 install --upgrade pip
          sudo pip3 install -U pytest sh
          sudo apt-get -y install open-iscsi
          sudo systemctl enable iscsid
      - name: Running upgrade path test
        run: |
          set -x
          # Remove the snapd refresh as soon as v2.52 lands
          sudo snap refresh snapd --channel=latest/edge
      - name: Check branches
        run: |
          set -x
          (cd tests; pytest -s verify-branches.py)
      - name: Running addons tests in strict mode
        run: |
          set -x
          sudo snap install microk8s.snap --dangerous
          sudo ./tests/connect-all-interfaces.sh
          ./tests/smoke-test.sh
          export UNDER_TIME_PRESSURE="True"
          export SKIP_OPENEBS="True"
          export SKIP_PROMETHEUS="False"
          (cd tests; pytest -s verify-branches.py)
          sudo -E bash -c "cd /var/snap/microk8s/common/addons/core/tests; pytest -s -ra test-addons.py"
          sudo microk8s enable community
          sudo -E bash -c "cd /var/snap/microk8s/common/addons/community/tests; pytest -s -ra test-addons.py"
          grep -Po "Report tarball is at \K.+" |
          sudo xargs -I {} mv {} inspection-report-strict-${{ strategy.job-index }}.tar.gz
          sudo snap remove microk8s --purge
          sudo rm -rf $HOME/.kube
          sudo rm -rf $HOME/.config/helm
          sudo dmesg | grep 'apparmor="DENIED"' > ./denials-${{ strategy.job-index }}.log
      - name: Upload strict inspect tarball
        uses: actions/upload-artifact@v2
        with:
          name: inspection-report-strict-actions
          path: ./inspection-report-strict-${{ strategy.job-index }}.tar.gz
      - name: Upload AppArmor denials
        uses: actions/upload-artifact@v2
        with:
          name: apparmor-denials
          path: ./denials-${{ strategy.job-index }}.log
      - name: Running addons tests in devmode
        run: |
          set -x
          ################ Until devmode of docker-support is fixed we skip this part of the tests #######
          exit 0
          sudo snap install microk8s.snap --devmode --dangerous
          sudo ./tests/connect-all-interfaces.sh
          ./tests/smoke-test.sh
          export UNDER_TIME_PRESSURE="True"
          export SKIP_OPENEBS="False"
          export SKIP_PROMETHEUS="False"
          (cd tests; sudo -E pytest -s -ra test-addons.py)
          sudo microk8s inspect |
          grep -Po "Report tarball is at \K.+" |
          sudo xargs -I {} mv {} inspection-report-devmode-${{ strategy.job-index }}.tar.gz
          sudo snap remove microk8s --purge
      - name: Upload devmode inspect tarball
        uses: actions/upload-artifact@v2
        with:
          name: inspection-report-devmode-actions
          path: ./inspection-report-devmode-${{ strategy.job-index }}.tar.gz
      - name: Generate AppArmor on failure
        run: sudo dmesg | grep 'apparmor="DENIED"' > ./denials-${{ strategy.job-index }}.log
        if: failure()
      - name: Upload AppArmor denials failure
        uses: actions/upload-artifact@v2
        with:
          name: apparmor-denials
          path: ./denials-${{ strategy.job-index }}.log
        if: failure()
      - name: Generate inspect tarball
        run: >
          sudo microk8s inspect |
          grep -Po "Report tarball is at \K.+" |
          sudo xargs -I {} mv {} inspection-report-fail-${{ strategy.job-index }}.tar.gz
        if: failure()
      - name: Upload inspect tarball
        uses: actions/upload-artifact@v2
        with:
          name: inspection-report-actions
          path: ./inspection-report-fail-${{ strategy.job-index }}.tar.gz
        if: failure()
