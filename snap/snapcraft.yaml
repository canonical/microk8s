name: microk8s
adopt-info: microk8s
summary: Kubernetes for workstations and appliances
description: |-
  MicroK8s is a small, fast, secure, single node Kubernetes that installs on
  just about any Linux box. Use it for offline development, prototyping,
  testing, or use it on a VM as a small, cheap, reliable k8s for CI/CD. It's
  also a great k8s for appliances - develop your IoT apps for k8s and deploy
  them to MicroK8s on your boxes.

grade: stable
confinement: strict
base: core18
assumes: [snapd2.52]

plugs:
  home-read-all:
    interface: home
    read: all
  docker-privileged:
    interface: docker-support
    privileged-containers: true
  docker-unprivileged:
    interface: docker-support
    privileged-containers: false
  k8s-kubelet:
    interface: kubernetes-support
    flavor: kubelet
  k8s-kubeproxy:
    interface: kubernetes-support
    flavor: kubeproxy
  k8s-journald:
    interface: kubernetes-support
    flavor: autobind-unix
  dot-kube:
    interface: personal-files
    write:
      - $HOME/.kube
  dot-config-helm:
    interface: personal-files
    write:
      - $HOME/.config/helm

slots:
  microk8s:
    interface: content
    content: microk8s
    source:
      read:
        - $SNAP/.microk8s-info/microk8s
        - $HOME/.kube
        - $SNAP_DATA/credentials

hooks:
  configure:
    plugs:
      - account-control
      - dot-kube
      - firewall-control
      - network
      - network-observe
  install:
    plugs:
      - account-control
      - network-bind
      - firewall-control
      - network-control
  remove:
    plugs:
      - k8s-kubelet
      - mount-observe
      - network-bind
      - network-control
      - firewall-control
  connect-plug-network-control:
    plugs:
      - dot-kube
      - network
      - kernel-module-control
      - network-control
  disconnect-plug-network-control:
    plugs:
      - dot-kube
      - kernel-module-control
      - network
      - network-control
  connect-plug-account-control:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-docker-privileged:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-kubernetes-support:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-k8s-kubelet:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-k8s-kubeproxy:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-dot-kube:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-network:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-network-bind:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-network-observe:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-firewall-control:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-process-control:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-kernel-module-observe:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-mount-observe:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-hardware-observe:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-system-observe:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-home:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-opengl:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-k8s-journald:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-cifs-mount:
    plugs:
      - dot-kube
      - network
      - network-bind
  connect-plug-fuse-support:
    plugs:
      - dot-kube
      - network
      - network-bind
  connect-plug-kernel-crypto-api:
    plugs:
      - dot-kube
      - network
      - network-bind
  connect-plug-dot-config-helm:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-log-observe:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-login-session-observe:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control
  connect-plug-home-read-all:
    plugs:
      - dot-kube
      - network
      - network-bind
      - network-control

apps:
  microk8s:
    command: microk8s.wrapper
    plugs:
      - account-control
      - docker-unprivileged
      - dot-config-helm
      - dot-kube
      - firewall-control
      - home-read-all
      - home
      - kernel-module-observe
      - kubernetes-support
      - login-session-observe
      - log-observe
      - mount-observe
      - network
      - network-control
      - network-observe
      - opengl
      - system-observe
  daemon-etcd:
    command: run-etcd-with-args
    daemon: simple
    install-mode: disable
    plugs:
      - network-bind
  daemon-flanneld:
    command: run-flanneld-with-args
    daemon: simple
    install-mode: disable
    plugs:
      - network-bind
      - network-control
      - firewall-control
  daemon-containerd:
    command: run-containerd-with-args
    daemon: notify
    install-mode: disable
    plugs:
      - k8s-journald
      - network-bind
      - docker-privileged
      - firewall-control
      - network-control
      - mount-observe
      - kubernetes-support
      - opengl
      - cifs-mount
      - fuse-support
      - kernel-crypto-api
    stop-mode: sigterm
    restart-condition: always
  daemon-kubelite:
    command: run-kubelite-with-args
    daemon: simple
    install-mode: disable
    plugs:
      - dot-kube
      - docker-privileged
      - firewall-control
      - hardware-observe
      - kubernetes-support
      - mount-observe
      - network-bind
      - network-observe
      - network-control
      - process-control
      - system-observe
      - opengl
      - kernel-module-observe
  daemon-apiserver:
    command: run-null-daemon
    daemon: simple
    install-mode: disable
    plugs:
      - network-bind
      - network-observe
      - network-control
      - k8s-journald
      - kubernetes-support
  daemon-apiserver-kicker:
    command: apiservice-kicker
    daemon: simple
    install-mode: disable
    plugs:
      - kernel-module-control
      - network-bind
      - network-observe
      - network-control
      - k8s-journald
      - kubernetes-support
  daemon-traefik:
    command: run-traefik-with-args
    install-mode: disable
    daemon: simple
    plugs:
      - kernel-module-control
      - network-bind
      - network-observe
      - network-control
  daemon-control-plane-kicker:
    command: run-null-daemon
    daemon: simple
    install-mode: disable
    plugs:
      - network-bind
      - network-observe
      - network-control
      - k8s-journald
      - kubernetes-support
  daemon-cluster-agent:
    command: run-cluster-agent-with-args
    daemon: simple
    install-mode: disable
    plugs:
      - mount-observe
      - network-bind
      - network-observe
      - network-control
  daemon-controller-manager:
    command: run-null-daemon
    daemon: simple
    install-mode: disable
    plugs:
      - network-bind
      - docker-privileged
      - firewall-control
      - k8s-journald
      - network-control
  daemon-scheduler:
    command: run-null-daemon
    daemon: simple
    install-mode: disable
    plugs:
      - network-bind
      - k8s-journald
  daemon-kubelet:
    command: run-null-daemon
    daemon: simple
    install-mode: disable
    plugs:
      - dot-kube
      - firewall-control
      - hardware-observe
      - k8s-kubelet
      - k8s-journald
      - mount-observe
      - network-bind
      - network-control
      - process-control
      - system-observe
      - opengl
  daemon-proxy:
    command: run-null-daemon
    daemon: simple
    install-mode: disable
    plugs:
      - network-bind
      - network-control
      - network-observe
      - firewall-control
      - k8s-kubeproxy
      - kernel-module-observe
      - mount-observe
      - system-observe
  daemon-k8s-dqlite:
    command: run-k8s-dqlite-with-args
    install-mode: disable
    daemon: simple
    plugs:
      - k8s-journald
      - network-bind
      - network-control
      - network-observe
      - firewall-control
  dashboard-proxy:
    command: microk8s-dashboard-proxy.wrapper
    plugs:
      - network-bind
      - network-control
      - network-observe
      - firewall-control
      - k8s-kubeproxy
      - kernel-module-observe
      - mount-observe
      - system-observe
  kubectl:
    command: microk8s-kubectl.wrapper
    completer: kubectl.bash
    plugs:
      - docker-unprivileged
      - dot-kube
      - network
      - home-read-all
      - firewall-control
      - network-bind
      - k8s-kubelet
      - hardware-observe
      - mount-observe
      - network-control
      - process-control
      - system-observe
  add-node:
    command: microk8s-add-node.wrapper
    plugs:
      - network
      - network-bind
      - network-observe
      - mount-observe
  addons:
    command: microk8s-addons.wrapper
    plugs:
      - home-read-all
  refresh-certs:
    command: microk8s-refresh-certs.wrapper
  images:
    command: microk8s-images.wrapper
  join:
    command: microk8s-join.wrapper
    plugs:
      - network
      - mount-observe
  remove-node:
    command: microk8s-remove-node.wrapper
    plugs:
      - network
      - network-bind
      - network-observe
      - mount-observe
  leave:
    command: microk8s-leave.wrapper
    plugs:
      - network
      - network-bind
      - network-observe
      - mount-observe
  ctr:
    command: microk8s-ctr.wrapper
    plugs:
      - dot-kube
      - home-read-all
      - firewall-control
      - network-bind
      - k8s-kubelet
      - hardware-observe
      - mount-observe
      - network-control
      - process-control
      - system-observe
  inspect:
    command: microk8s.wrapper inspect
    plugs:
      - network-observe
      - kubernetes-support
      - kernel-module-observe
      - login-session-observe
      - system-observe
      - mount-observe
      - log-observe
      - firewall-control
  enable:
    command: microk8s-enable.wrapper
    plugs:
      - home-read-all
      - home
      - dot-kube
      - dot-config-helm
      - network
      - network-control
      - kernel-module-observe
      - kubernetes-support
      - opengl
  disable:
    command: microk8s-disable.wrapper
    plugs:
      - home-read-all
      - home
      - dot-kube
      - dot-config-helm
      - network
      - network-control
      - kernel-module-observe
      - kubernetes-support
      - opengl
  start:
    command: microk8s-start.wrapper
    plugs:
      - network
  stop:
    command: microk8s-stop.wrapper
    plugs:
      - network
  status:
    command: microk8s-status.wrapper
    plugs:
      - network
  config:
    command: microk8s-config.wrapper
    plugs:
      - network-observe
  reset:
    command: microk8s-reset.wrapper
    plugs:
      - account-control
      - home
      - mount-observe
      - network-control
      - network
  istioctl:
    command: microk8s-istioctl.wrapper
    plugs:
      - network
  linkerd:
    command: microk8s-linkerd.wrapper
    plugs:
      - network
  helm:
    command: microk8s-helm.wrapper
    plugs:
      - home-read-all
      - home
      - dot-kube
      - dot-config-helm
      - kubernetes-support
      - network
  helm3:
    command: microk8s-helm3.wrapper
    plugs:
      - home-read-all
      - home
      - dot-kube
      - dot-config-helm
      - kubernetes-support
      - network
  cilium:
    command: microk8s-cilium.wrapper
    plugs:
      - network-bind
      - network-control
      - firewall-control
  dbctl:
    command: microk8s-dbctl.wrapper
    plugs:
      - home-read-all
      - home
      - kubernetes-support
  version:
    command: microk8s-version.wrapper

passthrough:
  system-usernames:
    snap_microk8s: shared
  layout:
    /usr/libexec:
      bind: $SNAP_COMMON/usr/libexec
    /usr/local/lib:
      bind: $SNAP_COMMON/usr/local/lib
    /lib/ufw/ufw-init:
      bind-file: $SNAP/lib/ufw/ufw-init
    /var/lib/cni:
      bind: $SNAP_COMMON/var/lib/cni
    /var/log/pods:
      bind: $SNAP_COMMON/var/log/pods
    /var/log/containers:
      bind: $SNAP_COMMON/var/log/containers
    /var/lib/kubelet:
      bind: $SNAP_DATA/kubelet
    /var/lib/kube-proxy:
      bind: $SNAP_DATA/kube-proxy
    /etc/service/enabled:
      bind: $SNAP_COMMON/etc/service/enabled
    /etc/nanorc:
      bind-file: $SNAP_COMMON/etc/nanorc

parts:
  raft:
    source: https://github.com/canonical/raft
    source-tag: v0.13.0
    build-attributes: [no-patchelf]
    source-type: git
    plugin: autotools
    stage-packages:
      - libuv1
    build-packages:
      - liblz4-dev
    organize:
      usr/lib/: lib/
      include/: usr/include/
    prime:
      - lib/libraft*so*
      - usr/include/

  sqlite:
    source: https://github.com/sqlite/sqlite
    source-type: git
    source-depth: 1
    source-tag: version-3.33.0
    build-attributes: [no-patchelf]
    build-environment:
      - CFLAGS: "-DSQLITE_ENABLE_DBSTAT_VTAB=1"
    plugin: autotools
    build-packages:
      - tcl
    override-build: |-
      set -ex
      git log -1 --format=format:%ci%n | sed -e 's/ [-+].*$//;s/ /T/;s/^/D /' > manifest
      git log -1 --format=format:%H > manifest.uuid
      cp /usr/share/misc/config.guess .
      cp /usr/share/misc/config.sub .
      autoreconf -f -i
      set +ex
      snapcraftctl build
    organize:
      include/: usr/include/
    prime:
      - bin/sqlite3
      - lib/libsqlite3*so*
      - usr/include/

  dqlite:
    after:
      - raft
      - sqlite
    source: https://github.com/canonical/dqlite
    source-tag: v1.10.0
    build-attributes: [no-patchelf]
    source-type: git
    plugin: autotools
    stage-packages:
      - libuv1
    build-packages:
      - libuv1-dev
      - pkg-config
    organize:
      usr/lib/: lib/
      include/: usr/include/
    prime:
      - lib/libdqlite*so*
      - lib/*/libuv*
      - usr/include/

  dqlite-client:
    build-snaps: [go]
    after: [sqlite, dqlite]
    source: build-scripts/
    plugin: dump
    override-build: |
      set -eux
      snap refresh go --channel=1.15/stable || true
      go version
      export TAG=v1.11.1
      export GOPATH=${SNAPCRAFT_STAGE}
      export CGO_CFLAGS="-I${SNAPCRAFT_STAGE}/usr/include/"
      export CGO_LDFLAGS="-L${SNAPCRAFT_STAGE}/lib"
      export CGO_LDFLAGS_ALLOW="-Wl,-z,now"
      mkdir -p $SNAPCRAFT_PART_INSTALL/bin
      mkdir -p $GOPATH/src/github.com/canonical/
      (
        cd $GOPATH/src/github.com/canonical/
        rm -rf go-dqlite
        git clone https://github.com/canonical/go-dqlite
        cd go-dqlite
        git checkout tags/"${TAG}" -b build
        go build -v -tags libsqlite3 ./cmd/dqlite
        cd ..
      )
      cp $GOPATH/src/github.com/canonical/go-dqlite/dqlite $SNAPCRAFT_PART_INSTALL/bin/

  k8s-dqlite:
    build-snaps: [go]
    after: [dqlite-client, dqlite]
    source: build-scripts/
    plugin: dump
    override-build: |
      set -eux
      . $SNAPCRAFT_PART_SRC/set-env-variables.sh
      snap refresh go --channel=1.15/stable || true
      go version
      export GOPATH=${SNAPCRAFT_STAGE}
      export CGO_LDFLAGS_ALLOW="-Wl,-z,now"
      export CGO_CFLAGS="-I${SNAPCRAFT_STAGE}/usr/include/"
      export CGO_LDFLAGS="-L${SNAPCRAFT_STAGE}/lib"
      mkdir -p $GOPATH/src/github.com/canonical/
      (
        cd $GOPATH/src/github.com/canonical/
        rm -rf k8s-dqlite
        git clone https://github.com/canonical/k8s-dqlite
        cd k8s-dqlite
        git checkout tags/"${K8S_DQLITE_TAG}" -b build
        go build  -tags libsqlite3,dqlite .
        cd ..
      )
      mkdir -p $SNAPCRAFT_PART_INSTALL/bin
      cp $GOPATH/src/github.com/canonical/k8s-dqlite/k8s-dqlite $SNAPCRAFT_PART_INSTALL/bin/
    stage-packages:
      - openssl

  etcd:
    plugin: dump
    source: build-scripts/
    build-snaps: [go]
    override-build: |
      . ./set-env-variables.sh
      case ${SNAPCRAFT_ARCH_TRIPLET%%-*} in
      x86_64|aarch64)
        echo "Supported arch by etcd - use official binary"
        curl -LO https://github.com/etcd-io/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-linux-$KUBE_ARCH.tar.gz
        tar -xzvf etcd-*.tar.gz --strip-components=1
        ;;
      *)
        echo "Unsupported arch by etcd - build from sources"
        curl -LO https://github.com/etcd-io/etcd/archive/${ETCD_VERSION}.tar.gz
        tar -xzf *.tar.gz
        cd etcd-*
        go mod vendor
        ./build
        cp -av bin/* ../
        echo "End of build"
      esac
      snapcraftctl build
    stage:
      - etcd
      - etcdctl

  traefik:
    plugin: dump
    source: build-scripts/
    build-snaps: [go]
    build-attributes: [no-patchelf]
    override-build: |
      . ./set-env-variables.sh
      mkdir -p $SNAPCRAFT_PART_INSTALL/bin
      case ${SNAPCRAFT_ARCH_TRIPLET%%-*} in
      x86_64|aarch64)
        echo "Supported arch by traefik - use official binary"
        curl -LO https://github.com/traefik/traefik/releases/download/${TRAEFIK_VERSION}/traefik_${TRAEFIK_VERSION}_linux_${KUBE_ARCH}.tar.gz
        tar -xzvf traefik_*.tar.gz
        cp traefik $SNAPCRAFT_PART_INSTALL/bin/
        ;;
      *)
        echo "Unsupported arch by traefik - building from sources"
        snap refresh go --channel=1.16/stable || true
        go version
        export GOPATH=$(realpath ../go)
        mkdir -p $SNAPCRAFT_PART_INSTALL/bin
        rm -rf $GOPATH
        mkdir -p $GOPATH
        curl -LO https://github.com/traefik/traefik/releases/download/${TRAEFIK_VERSION}/traefik-${TRAEFIK_VERSION}.src.tar.gz
        mkdir -p $GOPATH/src/github.com/traefik/traefik
        mv traefik*.tar.gz $GOPATH/src/github.com/traefik/traefik
        (
          cd $GOPATH/src/github.com/traefik/traefik
          GO111MODULE=off go get github.com/containous/go-bindata/...
          export GO111MODULE=on
          tar -zxvf traefik*.tar.gz
          rm -rf static/ autogen/;
          #make generate-webui
          export PATH=$PATH:$GOPATH/bin
          go generate
          go build ./cmd/traefik
        )
        cp $GOPATH/src/github.com/traefik/traefik/traefik $SNAPCRAFT_PART_INSTALL/bin/
      esac
    stage:
      - bin/traefik

  cni:
    plugin: dump
    source: build-scripts/
    override-build: |
      . ./set-env-variables.sh
      rm -rf cni*
      curl -LO https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-linux-$KUBE_ARCH-${CNI_VERSION}.tgz
      mkdir cni
      tar -xzvf cni-*.tgz -C cni/
      snapcraftctl build
    organize:
      ./cni/*: opt/cni/bin/
    filesets:
      bins: [./opt/cni/bin/*]
    stage: [$bins]

  flanneld:
    plugin: dump
    source: build-scripts/
    override-build: |
      . ./set-env-variables.sh
      curl -LO https://github.com/coreos/flannel/releases/download/${FLANNELD_VERSION}/flannel-${FLANNELD_VERSION}-linux-${KUBE_ARCH}.tar.gz
      tar -xzvf flannel-*.tar.gz
      snapcraftctl build
    organize:
      flanneld: opt/cni/bin/
    stage:
      - opt/cni/bin/flanneld

  k8s-binaries:
    after: [dqlite]
    build-snaps: [go]
    plugin: dump
    build-attributes: [no-patchelf]
    source: build-scripts/
    build-packages:
      - build-essential
      - curl
      - git
    override-build: |
      set -eux
      snap refresh go --channel=1.18/stable || true
      . ./set-env-variables.sh

      # if "${KUBE_SNAP_BINS}" exist we have to use the binaries from there
      # if "${KUBE_SNAP_BINS}" does not exist but it is set we will put the k8s binaries there
      # if "${KUBE_SNAP_BINS}" does not exist and it is not set we do not need to keep the created binaries
      if [ ! -e "${KUBE_SNAP_BINS}" ]; then
        if [ -z "${KUBE_SNAP_BINS}" ]; then
          . ./set-env-binaries-location.sh
        fi
        echo "Building k8s binaries"
        . ./build-k8s-binaries.sh
      else
        echo "Binaries provided in $KUBE_SNAP_BINS"
      fi
      mkdir -p bins/
      cp build/kube_bins/$KUBERNETES_TAG/$KUBE_ARCH/* bins/

      # Add bash completion for microk8s kubectl.
      bins/kubectl completion bash | sed "s/complete -o default -F __start_kubectl kubectl/complete -o default -F __start_kubectl microk8s kubectl/g" | sed "s/complete -o default -o nospace -F __start_kubectl kubectl/complete -o default -o nospace -F __start_kubectl kubectl/g" > kubectl.bash
      bins/kubectl completion bash | sed "s/complete -o default -F __start_kubectl kubectl/complete -o default -F __start_kubectl microk8s.kubectl/g" | sed "s/complete -o default -o nospace -F __start_kubectl kubectl/complete -o default -o nospace -F __start_kubectl kubectl/g" > kubectl.bash

      snapcraftctl build
    organize:
      bins/*: .
    stage:
      - kubelite
      - kubectl
      - kubectl.bash

  libmnl:
    plugin: autotools
    source: https://www.netfilter.org/pub/libmnl/libmnl-1.0.4.tar.bz2

  libnftnl:
    after:
      - libmnl
    plugin: autotools
    source: https://www.netfilter.org/projects/libnftnl/files/libnftnl-1.1.8.tar.bz2
    build-packages:
      - libjansson-dev

  iptables:
    after:
      - libnftnl
    source: https://www.netfilter.org/projects/iptables/files/iptables-1.8.6.tar.bz2
    plugin: autotools
    build-packages:
      - bison
      - flex
      - libnfnetlink-dev
      - libnetfilter-conntrack3
      - libnetfilter-conntrack-dev
    stage-packages:
      - ufw
    configflags:
      - "--disable-shared"
      - "--enable-static"
    stage:
      - -usr/bin/python3
    prime: [-bin/iptables-xml]

  migrator:
    build-snaps: [go]
    source: https://github.com/canonical/go-migrator
    source-type: git
    plugin: go
    go-channel: 1.15/stable
    go-importpath: github.com/canonical/go-migrator
    build-packages:
      - gcc
    prime:
      - bin/migrator

  containerd:
    build-snaps: [go]
    after: [iptables, runc]
    build-attributes: [no-patchelf]
    source: build-scripts/
    plugin: dump
    build-packages:
      - btrfs-tools
      - libseccomp-dev
    override-build: |
      set -eux
      . $SNAPCRAFT_PART_SRC/set-env-variables.sh
      snap refresh go --channel=1.18/stable || true
      go version
      export GOPATH=$(realpath ../go)
      mkdir -p $SNAPCRAFT_PART_INSTALL/bin

      # Build containerd
      rm -rf $GOPATH
      mkdir -p $GOPATH
      git clone https://github.com/containerd/containerd $GOPATH/containerd
      (
        cd $GOPATH/containerd
        git checkout -f ${CONTAINERD_COMMIT}
        # building the btrfs driver can be disabled via the
        # build tag no_btrfs, removing this dependency
        make
      )
      cp $GOPATH/containerd/bin/* $SNAPCRAFT_PART_INSTALL/bin/
      rm $SNAPCRAFT_PART_INSTALL/bin/containerd-stress

      # Assemble the snap
      snapcraftctl build
    organize:
      containerd/install/bin/*: bin/
    stage-packages:
      - libnss-myhostname
      - libnss-resolve
      - libnss-mymachines
      - conntrack
      - libssl1.0.0
    stage:
      - -sbin/xtables-multi
      - -sbin/iptables*
      - -lib/xtables

  runc:
    build-snaps: [go]
    after: [iptables]
    source: build-scripts/
    plugin: dump
    build-packages:
      - btrfs-tools
      - libseccomp-dev
    override-build: |
      set -eux
      . $SNAPCRAFT_PART_SRC/set-env-variables.sh

      snap refresh go --channel=1.18/stable || true
      go version
      export GOPATH=$(realpath ../go)

      mkdir -p $SNAPCRAFT_PART_INSTALL/bin
      if [ -d ${GOPATH}/runc ]; then
        rm -rf ${GOPATH}/runc
      fi
      git clone https://github.com/opencontainers/runc ${GOPATH}/runc
      (
        cd $GOPATH/runc
        git checkout ${RUNC_COMMIT}
        git config user.email "microk8s-builder-bot@ubuntu.com"
        git config user.name "MicroK8s builder bot"
        git am $SNAPCRAFT_PART_SRC/patches/runc/*
        make BUILDTAGS='seccomp apparmor'
      )
      cp $GOPATH/runc/runc $SNAPCRAFT_PART_INSTALL/bin/

      # Assemble the snap
      snapcraftctl build
    stage:
      - -sbin/xtables-multi
      - -sbin/iptables*
      - -lib/xtables

  auxiliary:
    plugin: nil
    stage-packages:
      - aufs-tools
      - coreutils
      - curl
      - diffutils
      - ethtool
      - gawk
      - git
      - grep
      - hostname
      - procps
      - squashfs-tools
      - tar
      - iproute2
      - jq
      - kmod
      - libatm1
      - members
      - net-tools
      - sed
      - socat
      - nano
      - util-linux
      - zfsutils-linux
    stage:
      - -usr/bin/python3

  cluster-agent:
    build-snaps: [go]
    build-packages: [make]
    build-attributes: [no-patchelf]
    plugin: dump
    source: .
    override-build: |
      set -eux
      snap refresh go --channel=1.18/stable || true

      mkdir -p $SNAPCRAFT_PART_INSTALL/bin
      . build-scripts/set-env-variables.sh

      go version
      export GOPATH=$(realpath ../go)

      mkdir -p $SNAPCRAFT_PART_INSTALL/bin
      if [ -d ${GOPATH}/cluster-agent ]; then
        rm -rf ${GOPATH}/cluster-agent
      fi
      git clone ${CLUSTER_AGENT_REPO} -b ${CLUSTER_AGENT_TAG} ${GOPATH}/cluster-agent
      (
        cd ${GOPATH}/cluster-agent
        make cluster-agent
      )
      cp ${GOPATH}/cluster-agent/cluster-agent $SNAPCRAFT_PART_INSTALL/bin

      # Assemble the snap
      snapcraftctl build

  microk8s-addons:
    plugin: dump
    build-attributes: [no-patchelf]
    build-packages:
      - python3
      - python3-yaml
      - python3-click
    source: .
    override-build: |
      set -eux

      . build-scripts/set-env-variables.sh

      if [ -d "addons" ]; then
        rm -rf addons
      fi
      mkdir -p addons

      IFS=';'
      echo "${ADDONS_REPOS}" | while read line; do
        if [ -z "${line}" ];
          then continue
        fi
        name="$(echo ${line} | cut -f1 -d',')"
        repository="$(echo ${line} | cut -f2 -d',')"
        reference="$(echo ${line} | cut -f3 -d',')"
        git clone "${repository}" -b "${reference}" "addons/${name}"
      done
      echo "${ADDONS_REPOS_ENABLED}" > addons/.auto-add

      snapcraftctl build

  microk8s:
    plugin: dump
    build-attributes: [no-patchelf]
    build-packages:
      - make
      - mercurial
      - git
      - rsync
      - openssl
      - file
      - dpkg
    source: .
    prime:
      - -README*
      - -installer*
      - -tests*
      - -docs*
      - -build*
      - -go*
      - -snap*
    override-build: |
      set -eux

      . build-scripts/set-env-variables.sh

      snapcraftctl set-version "${KUBE_VERSION}"

      echo "Setting default daemon configs"
      cp -r $KUBE_SNAP_ROOT/microk8s-resources/default-args .

      echo "Building certs"
      cp -r $KUBE_SNAP_ROOT/microk8s-resources/certs .
      cp -r $KUBE_SNAP_ROOT/microk8s-resources/certs-beta .

      echo "Preparing containerd"
      cp $KUBE_SNAP_ROOT/microk8s-resources/containerd-profile .

      echo "Preparing user config"
      cp $KUBE_SNAP_ROOT/microk8s-resources/client.config.template .

      echo "Creating commands and wrappers"
      cp $KUBE_SNAP_ROOT/microk8s-resources/wrappers/* .

      cp -r $KUBE_SNAP_ROOT/microk8s-resources/actions .

      echo "Creating inspect hook"
      cp $KUBE_SNAP_ROOT/scripts/inspect.sh .

      snapcraftctl build

  python-requirements:
    plugin: python
    python-version: python3
    source: .
    python-packages:
      - PyYAML == 5.3.1
      - netifaces == 0.10.9
      - jsonschema == 4.0.0
    stage-packages:
      - openssl
      - python3-openssl
      - python3-requests
      - python3-click
      - python3-dateutil
