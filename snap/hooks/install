#!/usr/bin/env bash

set -eux

source $SNAP/actions/common/utils.sh

if [ -f "${SNAP_DATA}/var/lock/installed.lock" ]
then
  exit 0
fi

ARCH="$(${SNAP}/bin/uname -m)"
export LD_LIBRARY_PATH="${SNAP}/lib:${SNAP}/usr/lib:${SNAP}/lib/$ARCH-linux-gnu:${SNAP}/usr/lib/$ARCH-linux-gnu"
export PATH="${SNAP}/usr/sbin:${SNAP}/usr/bin:${SNAP}/sbin:${SNAP}/bin:$PATH:/usr/bin:/usr/local/bin"
export OPENSSL_CONF="${SNAP}/etc/ssl/openssl.cnf"

cp -r --preserve=mode ${SNAP}/default-args ${SNAP_DATA}/args
mv ${SNAP_DATA}/args/certs.d/localhost__32000 ${SNAP_DATA}/args/certs.d/localhost:32000

# Sym link the host's /var/lib/kubelet to the Snap's.  This will be fixed with layouts when
# this Snap is strictly confined.  Warn if there's already a directory.
if ! [ -e /var/lib/kubelet ] &&
   ln -s $SNAP_COMMON/var/lib/kubelet /var/lib/kubelet
then
  echo "\`/var/lib/kubelet\` linked to $SNAP_COMMON"
else
  echo "\`/var/lib/kubelet\` already exists.  Will not be linking to $SNAP_COMMON"
fi

# Copy initial configuration from well-known paths.
# This is done prior to any other initialization.
#
# The following paths are checked in order for a config file.
# Only the first file found will be used, the rest will be ignored.
#
# - $SNAP_USER_COMMON/.microk8s.yaml  <-- user-defined config file, typically in /root/snap/microk8s/common/.microk8s.yaml
# - $SNAP_COMMON/.microk8s.yaml       <-- user-defined config file, typically in /var/snap/microk8s/common/.microk8s.yaml
# - $SNAP/microk8s.default.yaml       <-- default config file bundled with the snap
#
# If the pre-init step fails, the snap installation will fail, as it is considered to be a user error.
mkdir -p "${SNAP_COMMON}/etc/launcher"
for config_file in "$SNAP_USER_COMMON/.microk8s.yaml" "$SNAP_COMMON/.microk8s.yaml" "$SNAP/microk8s.default.yaml"; do
  if [ -f "${config_file}" ]; then
    echo "Found config file ${config_file}, will use to initialize cluster."

    if cp "${config_file}" "${SNAP_COMMON}/etc/launcher/install.yaml" then
      "${SNAP}/bin/cluster-agent" init --pre-init --config-file "${SNAP_COMMON}/etc/launcher/install.yaml"
      break
    fi
  fi
done

# Create the certificates
mkdir ${SNAP_DATA}/certs
# Allow the ability to add external IPs to the csr, by moving the csr.conf.template to SNAP_DATA
cp ${SNAP}/certs/csr.conf.template ${SNAP_DATA}/certs/csr.conf.template
produce_certs
rm -rf .srl

mkdir -p ${SNAP_DATA}/credentials
ca_data=$(cat ${SNAP_DATA}/certs/ca.crt | ${SNAP}/usr/bin/base64 -w 0)

# Create the known tokens
admin_token=$(openssl rand -base64 32 | ${SNAP}/usr/bin/base64)
echo "${admin_token},admin,admin,\"system:masters\"" > ${SNAP_DATA}/credentials/known_tokens.csv
proxy_token=$(${SNAP}/usr/bin/openssl rand -base64 32 | ${SNAP}/usr/bin/base64)
echo "${proxy_token},system:kube-proxy,kube-proxy" >> ${SNAP_DATA}/credentials/known_tokens.csv
kubelet_token=$(${SNAP}/usr/bin/openssl rand -base64 32 | ${SNAP}/usr/bin/base64)
hostname=$(hostname)
echo "${kubelet_token},system:node:${hostname},kubelet-0,\"system:nodes\"" >> ${SNAP_DATA}/credentials/known_tokens.csv
controller_token=$(${SNAP}/usr/bin/openssl rand -base64 32 | ${SNAP}/usr/bin/base64)
echo "${controller_token},system:kube-controller-manager,controller" >> ${SNAP_DATA}/credentials/known_tokens.csv
scheduler_token=$(${SNAP}/usr/bin/openssl rand -base64 32 | ${SNAP}/usr/bin/base64)
echo "${scheduler_token},system:kube-scheduler,scheduler" >> ${SNAP_DATA}/credentials/known_tokens.csv

# Create the client kubeconfig
cp ${SNAP}/client.config.template ${SNAP_DATA}/credentials/client.config
$SNAP/bin/sed -i 's/CADATA/'"${ca_data}"'/g' ${SNAP_DATA}/credentials/client.config
$SNAP/bin/sed -i 's/NAME/admin/g' ${SNAP_DATA}/credentials/client.config
$SNAP/bin/sed -i '/username/d' ${SNAP_DATA}/credentials/client.config
$SNAP/bin/sed -i 's/AUTHTYPE/token/g' ${SNAP_DATA}/credentials/client.config
$SNAP/bin/sed -i 's/PASSWORD/'"${admin_token}"'/g' ${SNAP_DATA}/credentials/client.config

# Create the client kubeconfig for the controller
cp ${SNAP}/client.config.template ${SNAP_DATA}/credentials/controller.config
$SNAP/bin/sed -i 's/CADATA/'"${ca_data}"'/g' ${SNAP_DATA}/credentials/controller.config
$SNAP/bin/sed -i 's/NAME/controller/g' ${SNAP_DATA}/credentials/controller.config
$SNAP/bin/sed -i '/username/d' ${SNAP_DATA}/credentials/controller.config
$SNAP/bin/sed -i 's/AUTHTYPE/token/g' ${SNAP_DATA}/credentials/controller.config
$SNAP/bin/sed -i 's/PASSWORD/'"${controller_token}"'/g' ${SNAP_DATA}/credentials/controller.config

# Create the client kubeconfig for the scheduler
cp ${SNAP}/client.config.template ${SNAP_DATA}/credentials/scheduler.config
$SNAP/bin/sed -i 's/CADATA/'"${ca_data}"'/g' ${SNAP_DATA}/credentials/scheduler.config
$SNAP/bin/sed -i 's/NAME/scheduler/g' ${SNAP_DATA}/credentials/scheduler.config
$SNAP/bin/sed -i '/username/d' ${SNAP_DATA}/credentials/scheduler.config
$SNAP/bin/sed -i 's/AUTHTYPE/token/g' ${SNAP_DATA}/credentials/scheduler.config
$SNAP/bin/sed -i 's/PASSWORD/'"${scheduler_token}"'/g' ${SNAP_DATA}/credentials/scheduler.config

# Create the proxy and kubelet kubeconfig
cp ${SNAP}/client.config.template ${SNAP_DATA}/credentials/kubelet.config
$SNAP/bin/sed -i 's/NAME/kubelet/g' ${SNAP_DATA}/credentials/kubelet.config
$SNAP/bin/sed -i 's/CADATA/'"${ca_data}"'/g' ${SNAP_DATA}/credentials/kubelet.config
$SNAP/bin/sed -i '/username/d' ${SNAP_DATA}/credentials/kubelet.config
$SNAP/bin/sed -i 's/AUTHTYPE/token/g' ${SNAP_DATA}/credentials/kubelet.config
$SNAP/bin/sed -i 's/PASSWORD/'"${kubelet_token}"'/g' ${SNAP_DATA}/credentials/kubelet.config

cp ${SNAP}/client.config.template ${SNAP_DATA}/credentials/proxy.config
$SNAP/bin/sed -i 's/NAME/kubeproxy/g' ${SNAP_DATA}/credentials/proxy.config
$SNAP/bin/sed -i 's/CADATA/'"${ca_data}"'/g' ${SNAP_DATA}/credentials/proxy.config
$SNAP/bin/sed -i '/username/d' ${SNAP_DATA}/credentials/proxy.config
$SNAP/bin/sed -i 's/AUTHTYPE/token/g' ${SNAP_DATA}/credentials/proxy.config
$SNAP/bin/sed -i 's/PASSWORD/'"${proxy_token}"'/g' ${SNAP_DATA}/credentials/proxy.config

# Install default-hooks
cp -r --preserve=mode ${SNAP}/default-hooks ${SNAP_COMMON}/hooks

for dir in ${SNAP_DATA}/credentials/ ${SNAP_DATA}/certs/ ${SNAP_DATA}/args/ ${SNAP_COMMON}/hooks
do
  chmod -R ug+rwX ${dir}
  chmod -R o-rwX ${dir}
done

if is_strict && snapctl is-connected k8s-kubelet
then
  snapctl restart microk8s.daemon-containerd
fi

init_cluster

mkdir -p "${SNAP_DATA}/var/lock"
set_service_not_expected_to_start etcd
set_service_not_expected_to_start flanneld
set_service_not_expected_to_start apiserver-proxy

touch "${SNAP_DATA}/var/lock/ha-cluster"
touch "${SNAP_DATA}/var/lock/lite.lock"

RESOURCES="${SNAP}/upgrade-scripts/000-switch-to-calico/resources"
BACKUP_DIR="${SNAP_DATA}/var/tmp/upgrades/000-switch-to-calico"

mkdir -p "${BACKUP_DIR}"

mkdir -p "${BACKUP_DIR}/args/cni-network/"
cp "${SNAP_DATA}"/args/cni-network/* "${BACKUP_DIR}/args/cni-network/" 2>/dev/null || true
rm -rf "${SNAP_DATA}"/args/cni-network/*
if [ "$ARCH" == "s390x" ]
then
  cp "${RESOURCES}/calico.s390x.yaml" "${SNAP_DATA}/args/cni-network/cni.yaml"
else
  cp "${RESOURCES}/calico.yaml" "${SNAP_DATA}/args/cni-network/cni.yaml"
fi
mkdir -p "$SNAP_DATA/opt/cni/bin/"
cp -R "$SNAP"/opt/cni/bin/* "$SNAP_DATA"/opt/cni/bin/

# Low memory guard. Enable by default when system RAM is less than 512MB.
MEMORY=`cat /proc/meminfo | grep MemTotal | awk '{ print $2 }'`
if [ $MEMORY -le 524288 ]
then
  touch ${SNAP_DATA}/var/lock/low-memory-guard.lock
fi

touch "${SNAP_DATA}/var/lock/installed.lock"
