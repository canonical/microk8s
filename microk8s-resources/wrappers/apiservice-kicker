#!/bin/bash

set -eu

export PATH="$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"
ARCH="$($SNAP/bin/uname -m)"
export LD_LIBRARY_PATH="$SNAP/lib:$SNAP/usr/lib:$SNAP/lib/$ARCH-linux-gnu:$SNAP/usr/lib/$ARCH-linux-gnu"
export LD_LIBRARY_PATH=$SNAP_LIBRARY_PATH:$LD_LIBRARY_PATH
export LC_ALL="${LC_ALL:-C.UTF-8}"
export LANG="${LANG:-C.UTF-8}"

source $SNAP/actions/common/utils.sh

if [ -e ${SNAP_DATA}/var/lock/clustered.lock ]
then
  echo "api service kicker will not run on a cluster node"
  exit 0
fi

if [ -e "${SNAP_DATA}/var/lock/low-memory-guard.lock" ]
then
	echo "not starting api service kicker because of low memory guard lock"
	exit 0
fi

group=$(get_microk8s_group)
restart_attempt=0
installed_registry_help=0

while true
do
    if [ $restart_attempt -ge 5 ]
    then
        echo "Service kicker restarted the apiserver too quickly. Exiting."
        exit 1
    fi

    # every 5 seconds
    sleep 5
    if [ -e "${SNAP_DATA}/var/lock/ha-cluster" ] &&
      getent group ${group} >/dev/null 2>&1
    then
      chmod -R ug+rwX ${SNAP_DATA}/var/kubernetes/backend || true
      chgrp ${group} -R ${SNAP_DATA}/var/kubernetes/backend || true
      chgrp ${group} ${SNAP_COMMON}/run/containerd.sock || true
    fi

    if ! [ -e "${SNAP_DATA}/var/lock/no-cert-reissue" ] &&
       ! grep -E "(--advertise-address|--bind-address)" $SNAP_DATA/args/kube-apiserver &> /dev/null &&
       ip route | grep default &> /dev/null
    then
      if snapctl services microk8s.daemon-kubelite | grep active &> /dev/null
      then
        csr_modified="$(produce_certs)"
        if [[ "$csr_modified" -eq "1" ]];
        then
            echo "CSR change detected. Restarting the cluster-agent"
            snapctl restart microk8s.daemon-cluster-agent

            echo "CSR change detected. Reconfiguring the kube-apiserver"
            rm -rf .srl
            snapctl stop microk8s.daemon-kubelite
            if is_strict
            then
              remove_all_containers
              snapctl restart microk8s.daemon-containerd
            else
              snapctl stop microk8s.daemon-containerd
              kill_all_container_shims
              snapctl start microk8s.daemon-containerd
            fi
            snapctl start microk8s.daemon-kubelite
            start_all_containers
            restart_attempt=$[$restart_attempt+1]
        else
            restart_attempt=0
        fi
      fi
    fi

    # Run reconcile hooks
    $SNAP/usr/bin/python3 $SNAP/scripts/run-lifecycle-hooks.py reconcile || true

    # Apply configuration files from $SNAP_COMMON/etc/launcher/
    match_config_files="${SNAP_COMMON}/etc/launcher/"*.yaml
    for config in ${match_config_files}; do
      # bash will return the regex if no files were found, in that case skip
      if [ "${config}" == "${match_config_files}" ]; then
        continue
      fi

      echo "Applying ${config}"
      if "${SNAP}/bin/cluster-agent" init --config-file "${config}"; then
        echo "Successfully applied ${config}"
        mv "${config}" "${config}.applied"
      else
        echo "Failed to apply ${config}"
      fi
    done

    # If no local-registry-hosting documentation has been installed,
    # install a help guide that points to the microk8s registry docs.
    #
    # Wait until the apiserver is up and is successfully responding to
    # namespace checks before we check for the registry configmap.
    if snapctl services microk8s.daemon-kubelite | grep active &> /dev/null
    then
      if [ $installed_registry_help -eq 0 ] &&
         "$SNAP/kubectl" "--kubeconfig=$SNAP_DATA/credentials/client.config" get namespace kube-public &> /dev/null
      then
        if ! "$SNAP/kubectl" "--kubeconfig=$SNAP_DATA/credentials/client.config" get configmap local-registry-hosting -n kube-public &> /dev/null
        then
          use_manifest registry/registry-help apply
        fi

        installed_registry_help=1
      fi
    fi
done
