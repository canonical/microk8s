#!/bin/bash

set -eu

export PATH="$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"
source $SNAP/actions/common/utils.sh

if [ -e ${SNAP_DATA}/var/lock/clustered.lock ]
then
  echo "This MicroK8s deployment is acting as a node in a cluster. Please use the microk8s refresh-certs command on the master"
  echo "and then return to this node to perform a microk8s leave and re-join."
  exit 0
fi

exit_if_no_permissions

BACKUP=$SNAP_DATA/var/log/ca-backup/
INSTALL=false
UNDO=false
CHECK=false
PARSED=$(getopt --options=iuhc --longoptions=install,undo,help,check --name "$@" -- "$@")
eval set -- "$PARSED"
while true; do
  case "$1" in
    -i|--install)
        INSTALL=true
        shift
        ;;
    -u|--undo)
        UNDO=true
        shift
        ;;
    -c|--check)
        CHECK=true
        shift
        ;;
    -h|--help)
        echo "Usage: $0 [OPTIONS]"
        echo
        echo "Refresh the CA certificates in this deployment"
        echo
        echo "Options:"
        echo " -h, --help          Show this help"
        echo " -u, --undo          Revert the last refresh performed"
        echo " -c, --check         Check the expiration time of the installed CA"
        echo " -i, --install       Install new CA certificates"
        exit 0
        ;;
    --)
        shift
        break
        ;;
    *)
        echo "$0: invalid option -- $1"
        exit 1
  esac
done


function revert {
  if ! [ -d "$BACKUP" ]
  then
    echo "No previous backup found"
    exit 1
  fi

  echo "Reverting certificates"
  run_with_sudo cp -r $BACKUP/certs/ ${SNAP_DATA}/
  run_with_sudo cp -r $BACKUP/credentials/ ${SNAP_DATA}/

  echo "Restarting"
  $SNAP/microk8s-stop.wrapper || true
  $SNAP/microk8s-start.wrapper
}


function refresh {
  # Backup
  echo "Backing up certificates under $BACKUP"
  run_with_sudo mkdir -p $SNAP_DATA/var/log/ca-backup/
  run_with_sudo cp -r ${SNAP_DATA}/certs $BACKUP
  run_with_sudo cp -r ${SNAP_DATA}/credentials $BACKUP/

  echo "Creating new certificates"
  run_with_sudo rm -rf ${SNAP_DATA}/certs/ca.crt
  run_with_sudo rm -rf ${SNAP_DATA}/certs/front-proxy-ca.crt
  run_with_sudo rm -rf ${SNAP_DATA}/certs/csr.conf
  produce_certs
  rm -rf .srl

  # Create the basic tokens
  echo "Creating new kubeconfig file"
  admin_token=`grep admin ${SNAP_DATA}/credentials/basic_auth.csv | cut -d, -f1`
  ca_data=$(cat ${SNAP_DATA}/certs/ca.crt | ${SNAP}/usr/bin/base64 -w 0)

  # Create the client kubeconfig
  run_with_sudo cp ${SNAP}/client.config.template ${SNAP_DATA}/credentials/client.config
  $SNAP/bin/sed -i 's/PASSWORD/'"${admin_token}"'/g' ${SNAP_DATA}/credentials/client.config
  $SNAP/bin/sed -i 's/CADATA/'"${ca_data}"'/g' ${SNAP_DATA}/credentials/client.config
  $SNAP/bin/sed -i 's/NAME/admin/g' ${SNAP_DATA}/credentials/client.config
  $SNAP/bin/sed -i 's/AUTHTYPE/password/g' ${SNAP_DATA}/credentials/client.config
  $SNAP/bin/sed -i 's/PASSWORD/'"${admin_token}"'/g' ${SNAP_DATA}/credentials/client.config

  # Create the known tokens
  proxy_token=`grep kube-proxy ${SNAP_DATA}/credentials/known_tokens.csv | cut -d, -f1`
  hostname=$(hostname)
  kubelet_token=`grep kubelet-0 ${SNAP_DATA}/credentials/known_tokens.csv | cut -d, -f1`
  controller_token=`grep kube-controller-manager ${SNAP_DATA}/credentials/known_tokens.csv | cut -d, -f1`
  scheduler_token=`grep kube-scheduler ${SNAP_DATA}/credentials/known_tokens.csv | cut -d, -f1`

  # Create the client kubeconfig for the controller
  run_with_sudo cp ${SNAP}/client.config.template ${SNAP_DATA}/credentials/controller.config
  $SNAP/bin/sed -i 's/CADATA/'"${ca_data}"'/g' ${SNAP_DATA}/credentials/controller.config
  $SNAP/bin/sed -i 's/NAME/controller/g' ${SNAP_DATA}/credentials/controller.config
  $SNAP/bin/sed -i '/username/d' ${SNAP_DATA}/credentials/controller.config
  $SNAP/bin/sed -i 's/AUTHTYPE/token/g' ${SNAP_DATA}/credentials/controller.config
  $SNAP/bin/sed -i 's/PASSWORD/'"${controller_token}"'/g' ${SNAP_DATA}/credentials/controller.config

  # Create the client kubeconfig for the scheduler
  run_with_sudo cp ${SNAP}/client.config.template ${SNAP_DATA}/credentials/scheduler.config
  $SNAP/bin/sed -i 's/CADATA/'"${ca_data}"'/g' ${SNAP_DATA}/credentials/scheduler.config
  $SNAP/bin/sed -i 's/NAME/scheduler/g' ${SNAP_DATA}/credentials/scheduler.config
  $SNAP/bin/sed -i '/username/d' ${SNAP_DATA}/credentials/scheduler.config
  $SNAP/bin/sed -i 's/AUTHTYPE/token/g' ${SNAP_DATA}/credentials/scheduler.config
  $SNAP/bin/sed -i 's/PASSWORD/'"${scheduler_token}"'/g' ${SNAP_DATA}/credentials/scheduler.config

  # Create the proxy and kubelet kubeconfig
  run_with_sudo cp ${SNAP}/client.config.template ${SNAP_DATA}/credentials/kubelet.config
  $SNAP/bin/sed -i 's/NAME/kubelet/g' ${SNAP_DATA}/credentials/kubelet.config
  $SNAP/bin/sed -i 's/CADATA/'"${ca_data}"'/g' ${SNAP_DATA}/credentials/kubelet.config
  $SNAP/bin/sed -i '/username/d' ${SNAP_DATA}/credentials/kubelet.config
  $SNAP/bin/sed -i 's/AUTHTYPE/token/g' ${SNAP_DATA}/credentials/kubelet.config
  $SNAP/bin/sed -i 's/PASSWORD/'"${kubelet_token}"'/g' ${SNAP_DATA}/credentials/kubelet.config

  run_with_sudo cp ${SNAP}/client.config.template ${SNAP_DATA}/credentials/proxy.config
  $SNAP/bin/sed -i 's/NAME/kubeproxy/g' ${SNAP_DATA}/credentials/proxy.config
  $SNAP/bin/sed -i 's/CADATA/'"${ca_data}"'/g' ${SNAP_DATA}/credentials/proxy.config
  $SNAP/bin/sed -i '/username/d' ${SNAP_DATA}/credentials/proxy.config
  $SNAP/bin/sed -i 's/AUTHTYPE/token/g' ${SNAP_DATA}/credentials/proxy.config
  $SNAP/bin/sed -i 's/PASSWORD/'"${proxy_token}"'/g' ${SNAP_DATA}/credentials/proxy.config

  $SNAP/microk8s-stop.wrapper || true
  $SNAP/microk8s-start.wrapper

  echo ""
  echo "The CA certificates have been replaced. Kubernetes will restart the pods of your workloads."
  echo "Any worker nodes you may have in your cluster need to be removed and re-joined to become aware of the new CA."
  echo ""
}

if [[ "$UNDO" == "true" ]]
then
  revert
  exit
elif [[ "$CHECK" == "true" ]]
then
  exp_date_str="$(openssl x509 -enddate -noout -in $SNAP_DATA/certs/ca.crt | cut -d= -f 2)"
  exp_date_secs="$(date -d "$exp_date_str" +%s)"
  now_secs=$(date +%s)
  difference=$(($exp_date_secs-$now_secs))
  days=$(($difference/(3600*24)))
  echo "The CA certificate will expire in $days days."
  exit 0
elif [[ "$INSTALL" == "true" ]]
then
  refresh
  exit 0
else
  echo "Use the --help to see the available options."
fi
