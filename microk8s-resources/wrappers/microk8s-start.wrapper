#!/bin/bash

set -eu

export PATH="$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"
source $SNAP/actions/common/utils.sh

if [ -e ${SNAP_DATA}/var/lock/clustered.lock ]
then
  echo "This MicroK8s deployment is acting as a node in a cluster. Please use the microk8s reset on the master."
  exit 0
fi

# Double-checking memory cgroup is enabled if we are on ARM
# https://github.com/ubuntu/microk8s/issues/1347

list="arm aarch64_be aarch64 armv8b armv8l"
for item in $list; do
  if [ "$(uname -m)" == "$item" ] && ! mount | egrep -q 'cgroup/memory'; then
    echo "WARNING: ARM ($(uname -m)) is detected and the memory cgroup is not enabled, therefore cluster could have an operational problems. More info: https://microk8s.io/docs/install-alternatives#heading--arm";
    break
  fi
done

PARSED=$(getopt --options=lho: --longoptions=help,output: --name "$@" -- "$@")
eval set -- "$PARSED"
while true; do
    case "$1" in
        -h|--help)
            echo "Usage: $0 [OPTIONS]"
            echo
            echo "Start Kubernetes services"
            echo
            echo "Options:"
            echo " -h, --help          Show this help"
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "$0: invalid option -- $1"
            exit 1
    esac
done


if ! run_with_sudo snap start ${SNAP_NAME} --enable
then
  echo 'Failed to start microk8s services. Check snapd logs with "journalctl -u snapd.service"'
  exit 1
else
  if [ -e ${SNAP_DATA}/var/lock/stopped.lock ]
  then
    # Mark the api server as starting
    run_with_sudo rm ${SNAP_DATA}/var/lock/stopped.lock &> /dev/null
  fi
fi

wait_for_node