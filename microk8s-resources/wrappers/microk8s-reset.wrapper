#!/bin/bash

set -eu

source $SNAP/actions/common/utils.sh

KUBECTL="$SNAP/kubectl --kubeconfig=${SNAP_DATA}/credentials/client.config"


usage() {
  cat<<EOF
Usage: ${SNAP_NAME} [OPTIONS...]

Options:
  -h, --help                 give this help list
  --destroy-storage          Also destroy storage
EOF
}


destroy_storage() {
  echo "Destroying storage"
  microk8s.enable storage && microk8s.disable storage \
      || echo "Ignoring storage destroying issue"
}


clean_cluster() {
  echo "Calling clean_cluster"
  # Clean the cluster
  REMOVEABLE_NSES=$($KUBECTL get ns -o=name | awk -F/ '{if ($2 !~ /^(default|kube-public|kube-system|kube-node-lease)$/) print}' | paste -s --delimiters=' ')
  if [ -n "$REMOVEABLE_NSES" ]
  then
    $KUBECTL delete $REMOVEABLE_NSES
  fi
  NSES=$($KUBECTL get ns -o=name | awk -F/ '{print $2}' | paste -s --delimiters=' ')
  for NS in $NSES
  do
    echo "Cleaning resources in namespace $NS"
    # we remove first resources that are automatically recreated so we do not risk race conditions
    # during which a deployment for example is recreated while any tokens are missing
    # delete all replicationcontrollers
    $KUBECTL delete --all replicationcontrollers --namespace="$NS"
    # delete all daemonsets
    $KUBECTL delete --all daemonsets --namespace="$NS"
    # delete all deployments
    $KUBECTL delete --all deployments --namespace="$NS"

    # Remove all resource types except the standard k8s apiservices themselves
    $KUBECTL delete --all $($KUBECTL api-resources -o name --verbs=delete --namespaced=true | grep -v '^apiservices$' | paste -s --delimiters=',') --namespace="$NS"
  done

  echo "Removing CRDs"
  $KUBECTL delete --all customresourcedefinitions.apiextensions.k8s.io

  ${SNAP}/microk8s-stop.wrapper
  sleep 5
  ${SNAP}/microk8s-start.wrapper

  # Wait for 200 secs at most.
  echo "Waiting for kubernetes resources to be released"
  n=0
  until [ $n -ge 10 ]
  do
    ($KUBECTL get po --all-namespaces 2>&1 | grep "No resources found" 2>&1 > /dev/null) && break
    n=$[$n+1]
    sleep 20
  done

  echo "Cleaning up addons client binaries.."
  if [ -d "$SNAP_DATA/bin/" ]
  then
    run_with_sudo rm -rf "$SNAP_DATA/bin/"
  fi
}

if [ -e ${SNAP_DATA}/var/lock/clustered.lock ]
then
  echo "This MicroK8s deployment is acting as a node in a cluster. Please use the microk8s.reset on the master."
  exit 0
fi

destroy_storage_enabled=false
while getopts ':h-:' opt; do
  case $opt in
    -)
      case "${OPTARG}" in
        help)
          usage
          exit 0
          ;;
        destroy-storage)
          destroy_storage_enabled=true
          ;;
        *)
          echo "Invalid option --${OPTARG}" >&2
          echo "Try '${SNAP_NAME} --help' for more information."
          exit 2
          ;;
      esac
      ;;
    h)
      usage
      exit 0
      ;;
    \?)
      echo "Invalid option -${OPTARG}" >&2
      echo "Try '${SNAP_NAME} --help' for more information."
      exit 2
      ;;

  esac
done

exit_if_stopped
exit_if_no_permissions

if ${destroy_storage_enabled} ; then
  destroy_storage
fi
clean_cluster

